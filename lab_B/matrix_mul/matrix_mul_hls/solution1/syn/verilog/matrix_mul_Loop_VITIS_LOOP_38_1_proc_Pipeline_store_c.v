// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_mul_Loop_VITIS_LOOP_38_1_proc_Pipeline_store_c (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RFIFONUM,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        p_read5,
        shl_ln38_mid2,
        trunc_ln,
        C,
        local_C_15_address0,
        local_C_15_ce0,
        local_C_15_q0,
        local_C_14_address0,
        local_C_14_ce0,
        local_C_14_q0,
        local_C_13_address0,
        local_C_13_ce0,
        local_C_13_q0,
        local_C_12_address0,
        local_C_12_ce0,
        local_C_12_q0,
        local_C_11_address0,
        local_C_11_ce0,
        local_C_11_q0,
        local_C_10_address0,
        local_C_10_ce0,
        local_C_10_q0,
        local_C_9_address0,
        local_C_9_ce0,
        local_C_9_q0,
        local_C_8_address0,
        local_C_8_ce0,
        local_C_8_q0,
        local_C_7_address0,
        local_C_7_ce0,
        local_C_7_q0,
        local_C_6_address0,
        local_C_6_ce0,
        local_C_6_q0,
        local_C_5_address0,
        local_C_5_ce0,
        local_C_5_q0,
        local_C_4_address0,
        local_C_4_ce0,
        local_C_4_q0,
        local_C_3_address0,
        local_C_3_ce0,
        local_C_3_q0,
        local_C_2_address0,
        local_C_2_ce0,
        local_C_2_q0,
        local_C_1_address0,
        local_C_1_ce0,
        local_C_1_q0,
        local_C_address0,
        local_C_ce0,
        local_C_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 16'd1;
parameter    ap_ST_fsm_pp0_stage1 = 16'd2;
parameter    ap_ST_fsm_pp0_stage2 = 16'd4;
parameter    ap_ST_fsm_pp0_stage3 = 16'd8;
parameter    ap_ST_fsm_pp0_stage4 = 16'd16;
parameter    ap_ST_fsm_pp0_stage5 = 16'd32;
parameter    ap_ST_fsm_pp0_stage6 = 16'd64;
parameter    ap_ST_fsm_pp0_stage7 = 16'd128;
parameter    ap_ST_fsm_pp0_stage8 = 16'd256;
parameter    ap_ST_fsm_pp0_stage9 = 16'd512;
parameter    ap_ST_fsm_pp0_stage10 = 16'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 16'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 16'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 16'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 16'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [63:0] m_axi_gmem2_AWADDR;
output  [0:0] m_axi_gmem2_AWID;
output  [31:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [0:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [31:0] m_axi_gmem2_WDATA;
output  [3:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [0:0] m_axi_gmem2_WID;
output  [0:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [63:0] m_axi_gmem2_ARADDR;
output  [0:0] m_axi_gmem2_ARID;
output  [31:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [0:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [31:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [0:0] m_axi_gmem2_RID;
input  [8:0] m_axi_gmem2_RFIFONUM;
input  [0:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [0:0] m_axi_gmem2_BID;
input  [0:0] m_axi_gmem2_BUSER;
input  [36:0] p_read5;
input  [61:0] shl_ln38_mid2;
input  [61:0] trunc_ln;
input  [63:0] C;
output  [3:0] local_C_15_address0;
output   local_C_15_ce0;
input  [31:0] local_C_15_q0;
output  [3:0] local_C_14_address0;
output   local_C_14_ce0;
input  [31:0] local_C_14_q0;
output  [3:0] local_C_13_address0;
output   local_C_13_ce0;
input  [31:0] local_C_13_q0;
output  [3:0] local_C_12_address0;
output   local_C_12_ce0;
input  [31:0] local_C_12_q0;
output  [3:0] local_C_11_address0;
output   local_C_11_ce0;
input  [31:0] local_C_11_q0;
output  [3:0] local_C_10_address0;
output   local_C_10_ce0;
input  [31:0] local_C_10_q0;
output  [3:0] local_C_9_address0;
output   local_C_9_ce0;
input  [31:0] local_C_9_q0;
output  [3:0] local_C_8_address0;
output   local_C_8_ce0;
input  [31:0] local_C_8_q0;
output  [3:0] local_C_7_address0;
output   local_C_7_ce0;
input  [31:0] local_C_7_q0;
output  [3:0] local_C_6_address0;
output   local_C_6_ce0;
input  [31:0] local_C_6_q0;
output  [3:0] local_C_5_address0;
output   local_C_5_ce0;
input  [31:0] local_C_5_q0;
output  [3:0] local_C_4_address0;
output   local_C_4_ce0;
input  [31:0] local_C_4_q0;
output  [3:0] local_C_3_address0;
output   local_C_3_ce0;
input  [31:0] local_C_3_q0;
output  [3:0] local_C_2_address0;
output   local_C_2_ce0;
input  [31:0] local_C_2_q0;
output  [3:0] local_C_1_address0;
output   local_C_1_ce0;
input  [31:0] local_C_1_q0;
output  [3:0] local_C_address0;
output   local_C_ce0;
input  [31:0] local_C_q0;

reg ap_idle;
reg m_axi_gmem2_AWVALID;
reg m_axi_gmem2_WVALID;
reg[31:0] m_axi_gmem2_WDATA;
reg m_axi_gmem2_BREADY;
reg local_C_15_ce0;
reg local_C_14_ce0;
reg local_C_13_ce0;
reg local_C_12_ce0;
reg local_C_11_ce0;
reg local_C_10_ce0;
reg local_C_9_ce0;
reg local_C_8_ce0;
reg local_C_7_ce0;
reg local_C_6_ce0;
reg local_C_5_ce0;
reg local_C_4_ce0;
reg local_C_3_ce0;
reg local_C_2_ce0;
reg local_C_1_ce0;
reg local_C_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
reg   [0:0] icmp_ln97_reg_690;
reg    ap_block_state8_io;
reg    ap_block_state24_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_subdone;
reg    ap_condition_exit_pp0_iter0_stage7;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state16_pp0_stage15_iter0;
reg    ap_block_state16_io;
reg    ap_block_pp0_stage15_subdone;
reg    gmem2_blk_n_AW;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    gmem2_blk_n_W;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    gmem2_blk_n_B;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state17_pp0_stage0_iter1;
reg    ap_block_state17_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln97_fu_495_p2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state18_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] gmem2_addr_reg_774;
reg   [31:0] local_C_15_load_reg_795;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_state3_io;
wire    ap_block_state19_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
reg   [31:0] local_C_14_load_reg_800;
reg   [31:0] local_C_13_load_reg_805;
reg   [31:0] local_C_12_load_reg_810;
reg   [31:0] local_C_11_load_reg_815;
reg   [31:0] local_C_10_load_reg_820;
reg   [31:0] local_C_9_load_reg_825;
reg   [31:0] local_C_8_load_reg_830;
reg   [31:0] local_C_7_load_reg_835;
reg   [31:0] local_C_6_load_reg_840;
reg   [31:0] local_C_5_load_reg_845;
reg   [31:0] local_C_4_load_reg_850;
reg   [31:0] local_C_3_load_reg_855;
reg   [31:0] local_C_2_load_reg_860;
reg   [31:0] local_C_1_load_reg_865;
reg   [31:0] local_C_load_reg_870;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln97_fu_510_p1;
wire  signed [63:0] sext_ln99_fu_572_p1;
reg    ap_block_pp0_stage7_11001;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_state4_io;
wire    ap_block_state20_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
wire   [31:0] bitcast_ln99_fu_592_p1;
wire    ap_block_pp0_stage3_01001;
wire    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_state5_io;
wire    ap_block_state21_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
wire   [31:0] bitcast_ln99_1_fu_596_p1;
wire    ap_block_pp0_stage4_01001;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_state6_io;
wire    ap_block_state22_pp0_stage5_iter1;
reg    ap_block_pp0_stage5_11001;
wire   [31:0] bitcast_ln99_2_fu_600_p1;
wire    ap_block_pp0_stage5_01001;
wire    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_state7_io;
wire    ap_block_state23_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
wire   [31:0] bitcast_ln99_3_fu_604_p1;
wire    ap_block_pp0_stage6_01001;
wire   [31:0] bitcast_ln99_4_fu_608_p1;
reg    ap_block_pp0_stage7_01001;
wire    ap_block_state9_pp0_stage8_iter0;
reg    ap_block_state9_io;
reg    ap_block_pp0_stage8_11001;
wire   [31:0] bitcast_ln99_5_fu_612_p1;
wire    ap_block_pp0_stage8_01001;
wire    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage9_11001;
wire   [31:0] bitcast_ln99_6_fu_616_p1;
wire    ap_block_pp0_stage9_01001;
wire    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_state11_io;
reg    ap_block_pp0_stage10_11001;
wire   [31:0] bitcast_ln99_7_fu_620_p1;
wire    ap_block_pp0_stage10_01001;
wire    ap_block_state12_pp0_stage11_iter0;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage11_11001;
wire   [31:0] bitcast_ln99_8_fu_624_p1;
wire    ap_block_pp0_stage11_01001;
wire    ap_block_state13_pp0_stage12_iter0;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage12_11001;
wire   [31:0] bitcast_ln99_9_fu_628_p1;
wire    ap_block_pp0_stage12_01001;
wire    ap_block_state14_pp0_stage13_iter0;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage13_11001;
wire   [31:0] bitcast_ln99_10_fu_632_p1;
wire    ap_block_pp0_stage13_01001;
wire    ap_block_state15_pp0_stage14_iter0;
reg    ap_block_state15_io;
reg    ap_block_pp0_stage14_11001;
wire   [31:0] bitcast_ln99_11_fu_636_p1;
wire    ap_block_pp0_stage14_01001;
reg    ap_block_pp0_stage15_11001;
wire   [31:0] bitcast_ln99_12_fu_640_p1;
wire    ap_block_pp0_stage15_01001;
wire   [31:0] bitcast_ln99_13_fu_644_p1;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln99_14_fu_648_p1;
wire    ap_block_pp0_stage1_01001;
wire   [31:0] bitcast_ln99_15_fu_652_p1;
wire    ap_block_pp0_stage2_01001;
reg   [36:0] phi_mul4263_fu_106;
wire   [36:0] next_mul4264_fu_530_p2;
wire    ap_loop_init;
reg   [4:0] ii_fu_110;
wire   [4:0] add_ln97_fu_501_p2;
wire  signed [36:0] next_mul4264_fu_530_p0;
wire  signed [36:0] sext_ln43_fu_535_p0;
wire  signed [61:0] sext_ln43_fu_535_p1;
wire   [61:0] tmp6_fu_539_p2;
wire   [61:0] empty_46_fu_544_p2;
wire   [63:0] tmp_2_fu_549_p3;
wire   [63:0] empty_47_fu_557_p2;
wire   [61:0] trunc_ln2_fu_562_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [15:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

matrix_mul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage7),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage7_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage7)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ii_fu_110 <= 5'd0;
    end else if (((icmp_ln97_fu_495_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ii_fu_110 <= add_ln97_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        phi_mul4263_fu_106 <= 37'd0;
    end else if (((icmp_ln97_fu_495_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        phi_mul4263_fu_106 <= next_mul4264_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_495_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem2_addr_reg_774 <= sext_ln99_fu_572_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln97_reg_690 <= icmp_ln97_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln97_reg_690 == 1'd0))) begin
        local_C_10_load_reg_820 <= local_C_10_q0;
        local_C_11_load_reg_815 <= local_C_11_q0;
        local_C_12_load_reg_810 <= local_C_12_q0;
        local_C_13_load_reg_805 <= local_C_13_q0;
        local_C_14_load_reg_800 <= local_C_14_q0;
        local_C_15_load_reg_795 <= local_C_15_q0;
        local_C_1_load_reg_865 <= local_C_1_q0;
        local_C_2_load_reg_860 <= local_C_2_q0;
        local_C_3_load_reg_855 <= local_C_3_q0;
        local_C_4_load_reg_850 <= local_C_4_q0;
        local_C_5_load_reg_845 <= local_C_5_q0;
        local_C_6_load_reg_840 <= local_C_6_q0;
        local_C_7_load_reg_835 <= local_C_7_q0;
        local_C_8_load_reg_830 <= local_C_8_q0;
        local_C_9_load_reg_825 <= local_C_9_q0;
        local_C_load_reg_870 <= local_C_q0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone) & (icmp_ln97_reg_690 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage7 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage7_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln97_reg_690 == 1'd0))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15) & (icmp_ln97_reg_690 == 1'd0)))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_10_ce0 = 1'b1;
    end else begin
        local_C_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_11_ce0 = 1'b1;
    end else begin
        local_C_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_12_ce0 = 1'b1;
    end else begin
        local_C_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_13_ce0 = 1'b1;
    end else begin
        local_C_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_14_ce0 = 1'b1;
    end else begin
        local_C_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_15_ce0 = 1'b1;
    end else begin
        local_C_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_1_ce0 = 1'b1;
    end else begin
        local_C_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_2_ce0 = 1'b1;
    end else begin
        local_C_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_3_ce0 = 1'b1;
    end else begin
        local_C_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_4_ce0 = 1'b1;
    end else begin
        local_C_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_5_ce0 = 1'b1;
    end else begin
        local_C_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_6_ce0 = 1'b1;
    end else begin
        local_C_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_7_ce0 = 1'b1;
    end else begin
        local_C_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_8_ce0 = 1'b1;
    end else begin
        local_C_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_9_ce0 = 1'b1;
    end else begin
        local_C_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_C_ce0 = 1'b1;
    end else begin
        local_C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_AWVALID = 1'b1;
    end else begin
        m_axi_gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        m_axi_gmem2_BREADY = 1'b1;
    end else begin
        m_axi_gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_15_fu_652_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_14_fu_648_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_13_fu_644_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_12_fu_640_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_11_fu_636_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_10_fu_632_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_9_fu_628_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_8_fu_624_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_7_fu_620_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_6_fu_616_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_5_fu_612_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_4_fu_608_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_3_fu_604_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_2_fu_600_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_1_fu_596_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001) & (icmp_ln97_reg_690 == 1'd0))) begin
        m_axi_gmem2_WDATA = bitcast_ln99_fu_592_p1;
    end else begin
        m_axi_gmem2_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln97_reg_690 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln97_reg_690 == 1'd0)))) begin
        m_axi_gmem2_WVALID = 1'b1;
    end else begin
        m_axi_gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage7)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln97_fu_501_p2 = (ii_fu_110 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state17_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state17_io));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state11_io));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state11_io));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state12_io));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state12_io));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state13_io));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state13_io));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state14_io));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state14_io));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state15_io));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state15_io));
end

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state16_io));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state16_io));
end

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_gmem2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_gmem2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state7_io));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state7_io));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_01001 = ((m_axi_gmem2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((m_axi_gmem2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state8_io)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((m_axi_gmem2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state8_io)));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state9_io));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state9_io));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state10_io));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state10_io));
end

always @ (*) begin
    ap_block_state10_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state17_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp0_stage7_iter1 = (m_axi_gmem2_BVALID == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem2_AWREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((m_axi_gmem2_WREADY == 1'b0) & (icmp_ln97_reg_690 == 1'd0));
end

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage7;

assign bitcast_ln99_10_fu_632_p1 = local_C_5_load_reg_845;

assign bitcast_ln99_11_fu_636_p1 = local_C_4_load_reg_850;

assign bitcast_ln99_12_fu_640_p1 = local_C_3_load_reg_855;

assign bitcast_ln99_13_fu_644_p1 = local_C_2_load_reg_860;

assign bitcast_ln99_14_fu_648_p1 = local_C_1_load_reg_865;

assign bitcast_ln99_15_fu_652_p1 = local_C_load_reg_870;

assign bitcast_ln99_1_fu_596_p1 = local_C_14_load_reg_800;

assign bitcast_ln99_2_fu_600_p1 = local_C_13_load_reg_805;

assign bitcast_ln99_3_fu_604_p1 = local_C_12_load_reg_810;

assign bitcast_ln99_4_fu_608_p1 = local_C_11_load_reg_815;

assign bitcast_ln99_5_fu_612_p1 = local_C_10_load_reg_820;

assign bitcast_ln99_6_fu_616_p1 = local_C_9_load_reg_825;

assign bitcast_ln99_7_fu_620_p1 = local_C_8_load_reg_830;

assign bitcast_ln99_8_fu_624_p1 = local_C_7_load_reg_835;

assign bitcast_ln99_9_fu_628_p1 = local_C_6_load_reg_840;

assign bitcast_ln99_fu_592_p1 = local_C_15_load_reg_795;

assign empty_46_fu_544_p2 = (tmp6_fu_539_p2 + trunc_ln);

assign empty_47_fu_557_p2 = (tmp_2_fu_549_p3 + C);

assign icmp_ln97_fu_495_p2 = ((ii_fu_110 == 5'd16) ? 1'b1 : 1'b0);

assign local_C_10_address0 = zext_ln97_fu_510_p1;

assign local_C_11_address0 = zext_ln97_fu_510_p1;

assign local_C_12_address0 = zext_ln97_fu_510_p1;

assign local_C_13_address0 = zext_ln97_fu_510_p1;

assign local_C_14_address0 = zext_ln97_fu_510_p1;

assign local_C_15_address0 = zext_ln97_fu_510_p1;

assign local_C_1_address0 = zext_ln97_fu_510_p1;

assign local_C_2_address0 = zext_ln97_fu_510_p1;

assign local_C_3_address0 = zext_ln97_fu_510_p1;

assign local_C_4_address0 = zext_ln97_fu_510_p1;

assign local_C_5_address0 = zext_ln97_fu_510_p1;

assign local_C_6_address0 = zext_ln97_fu_510_p1;

assign local_C_7_address0 = zext_ln97_fu_510_p1;

assign local_C_8_address0 = zext_ln97_fu_510_p1;

assign local_C_9_address0 = zext_ln97_fu_510_p1;

assign local_C_address0 = zext_ln97_fu_510_p1;

assign m_axi_gmem2_ARADDR = 64'd0;

assign m_axi_gmem2_ARBURST = 2'd0;

assign m_axi_gmem2_ARCACHE = 4'd0;

assign m_axi_gmem2_ARID = 1'd0;

assign m_axi_gmem2_ARLEN = 32'd0;

assign m_axi_gmem2_ARLOCK = 2'd0;

assign m_axi_gmem2_ARPROT = 3'd0;

assign m_axi_gmem2_ARQOS = 4'd0;

assign m_axi_gmem2_ARREGION = 4'd0;

assign m_axi_gmem2_ARSIZE = 3'd0;

assign m_axi_gmem2_ARUSER = 1'd0;

assign m_axi_gmem2_ARVALID = 1'b0;

assign m_axi_gmem2_AWADDR = gmem2_addr_reg_774;

assign m_axi_gmem2_AWBURST = 2'd0;

assign m_axi_gmem2_AWCACHE = 4'd0;

assign m_axi_gmem2_AWID = 1'd0;

assign m_axi_gmem2_AWLEN = 32'd16;

assign m_axi_gmem2_AWLOCK = 2'd0;

assign m_axi_gmem2_AWPROT = 3'd0;

assign m_axi_gmem2_AWQOS = 4'd0;

assign m_axi_gmem2_AWREGION = 4'd0;

assign m_axi_gmem2_AWSIZE = 3'd0;

assign m_axi_gmem2_AWUSER = 1'd0;

assign m_axi_gmem2_RREADY = 1'b0;

assign m_axi_gmem2_WID = 1'd0;

assign m_axi_gmem2_WLAST = 1'b0;

assign m_axi_gmem2_WSTRB = 4'd15;

assign m_axi_gmem2_WUSER = 1'd0;

assign next_mul4264_fu_530_p0 = phi_mul4263_fu_106;

assign next_mul4264_fu_530_p2 = ($signed(next_mul4264_fu_530_p0) + $signed(p_read5));

assign sext_ln43_fu_535_p0 = phi_mul4263_fu_106;

assign sext_ln43_fu_535_p1 = sext_ln43_fu_535_p0;

assign sext_ln99_fu_572_p1 = $signed(trunc_ln2_fu_562_p4);

assign tmp6_fu_539_p2 = ($signed(shl_ln38_mid2) + $signed(sext_ln43_fu_535_p1));

assign tmp_2_fu_549_p3 = {{empty_46_fu_544_p2}, {2'd0}};

assign trunc_ln2_fu_562_p4 = {{empty_47_fu_557_p2[63:2]}};

assign zext_ln97_fu_510_p1 = ii_fu_110;

endmodule //matrix_mul_Loop_VITIS_LOOP_38_1_proc_Pipeline_store_c
