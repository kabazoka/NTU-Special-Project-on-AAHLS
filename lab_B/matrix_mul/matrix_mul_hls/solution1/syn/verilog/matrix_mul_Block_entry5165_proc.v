// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_mul_Block_entry5165_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        N,
        P,
        M,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] N;
input  [31:0] P;
input  [31:0] M;
output  [0:0] ap_return_0;
output  [61:0] ap_return_1;
output  [63:0] ap_return_2;
output  [36:0] ap_return_3;
output  [60:0] ap_return_4;
output  [27:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return_0;
reg[61:0] ap_return_1;
reg[63:0] ap_return_2;
reg[36:0] ap_return_3;
reg[60:0] ap_return_4;
reg[27:0] ap_return_5;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire  signed [31:0] cmp1922_out_0_fu_48_p0;
wire  signed [31:0] sext_ln38_fu_54_p0;
wire  signed [31:0] sext_ln38_1_fu_58_p0;
wire  signed [31:0] sext_ln38_2_fu_62_p0;
wire  signed [31:0] sext_ln38_3_fu_66_p0;
wire  signed [32:0] sext_ln38_3_fu_66_p1;
wire   [32:0] add_ln38_fu_70_p2;
wire   [28:0] trunc_ln_fu_76_p4;
wire  signed [59:0] sext_ln38_4_fu_86_p1;
wire   [60:0] zext_ln38_fu_90_p1;
wire   [31:0] add_ln38_2_fu_106_p2;
wire   [0:0] icmp_ln38_fu_100_p2;
wire   [27:0] tmp_fu_112_p4;
wire   [0:0] cmp1922_out_0_fu_48_p2;
wire  signed [61:0] sext_ln38_fu_54_p1;
wire  signed [63:0] sext_ln38_1_fu_58_p1;
wire  signed [36:0] sext_ln38_2_fu_62_p1;
wire   [60:0] add_ln38_1_fu_94_p2;
wire   [27:0] select_ln38_fu_122_p3;
reg   [0:0] ap_return_0_preg;
reg   [61:0] ap_return_1_preg;
reg   [63:0] ap_return_2_preg;
reg   [36:0] ap_return_3_preg;
reg   [60:0] ap_return_4_preg;
reg   [27:0] ap_return_5_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 1'd0;
#0 ap_return_1_preg = 62'd0;
#0 ap_return_2_preg = 64'd0;
#0 ap_return_3_preg = 37'd0;
#0 ap_return_4_preg = 61'd0;
#0 ap_return_5_preg = 28'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 1'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= cmp1922_out_0_fu_48_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 62'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= sext_ln38_fu_54_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 64'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_2_preg <= sext_ln38_1_fu_58_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 37'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_3_preg <= sext_ln38_2_fu_62_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 61'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_4_preg <= add_ln38_1_fu_94_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 28'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_5_preg <= select_ln38_fu_122_p3;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = cmp1922_out_0_fu_48_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = sext_ln38_fu_54_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = sext_ln38_1_fu_58_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = sext_ln38_2_fu_62_p1;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = add_ln38_1_fu_94_p2;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_5 = select_ln38_fu_122_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln38_1_fu_94_p2 = (zext_ln38_fu_90_p1 + 61'd1);

assign add_ln38_2_fu_106_p2 = (M + 32'd15);

assign add_ln38_fu_70_p2 = ($signed(sext_ln38_3_fu_66_p1) + $signed(33'd8589934591));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign cmp1922_out_0_fu_48_p0 = N;

assign cmp1922_out_0_fu_48_p2 = (($signed(cmp1922_out_0_fu_48_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_100_p2 = (($signed(M) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign select_ln38_fu_122_p3 = ((icmp_ln38_fu_100_p2[0:0] == 1'b1) ? tmp_fu_112_p4 : 28'd0);

assign sext_ln38_1_fu_58_p0 = P;

assign sext_ln38_1_fu_58_p1 = sext_ln38_1_fu_58_p0;

assign sext_ln38_2_fu_62_p0 = P;

assign sext_ln38_2_fu_62_p1 = sext_ln38_2_fu_62_p0;

assign sext_ln38_3_fu_66_p0 = N;

assign sext_ln38_3_fu_66_p1 = sext_ln38_3_fu_66_p0;

assign sext_ln38_4_fu_86_p1 = $signed(trunc_ln_fu_76_p4);

assign sext_ln38_fu_54_p0 = N;

assign sext_ln38_fu_54_p1 = sext_ln38_fu_54_p0;

assign tmp_fu_112_p4 = {{add_ln38_2_fu_106_p2[31:4]}};

assign trunc_ln_fu_76_p4 = {{add_ln38_fu_70_p2[32:4]}};

assign zext_ln38_fu_90_p1 = $unsigned(sext_ln38_4_fu_86_p1);

endmodule //matrix_mul_Block_entry5165_proc
